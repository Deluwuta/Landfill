#+Title: Delta's GNU Emacs Config (Ripped from DT)
#+Author: Delta (<https://github.com/deluwuta>)
#+Description: GNU Emacs custom (Dt's) config
#+Startup: showeverything
#+Options: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#package-manager-elpaca-not-in-use][Package Manager (Elpaca) (Not in use)]]
  - [[#package-manager-straight][Package Manager (Straight)]]
  - [[#evil-mode-vim-like-keybindings][Evil Mode (Vim-like keybindings)]]
  - [[#general-keybindings-generalel][General Keybindings (general.el)]]
- [[#fonts][FONTS]]
  - [[#setting-the-font-face][Setting the Font Face]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#source-code-block-tag-expansion][Source Code Block Tag Expansion]]
- [[#theme][THEME]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST

** Package Manager (Elpaca) (Not in use)
I switched over to Straight cuz Elpaca gave me some problems with the hot reload. Also, a full new buffer everytime I reload is annoying.

If you want to use it over Straight just remove the ";" at the start and end of the source block, remove the "Package Manager (Straight)" block and restart Emacs.

;#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
;;(elpaca nil (message "deferred"))
  
;#+end_src

** Package Manager (Straight)
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

  ;; Use-package support
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)

#+end_src

** Evil Mode (Vim-like keybindings)

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; Optional
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  ;;(use-package evil-tutor)

#+end_src

** General Keybindings (general.el)

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

    ;; Set up 'SPC' as the global leader key
    (general-create-definer delta/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC" ;; Set leader
      :global-prefix "M-SPC") ;; Access leader in insert mode

    (delta/leader-keys
      "." '(find-file :wk "Find file")
      "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config.org")
      "l" '(comment-line :wk "(Un)Comment lines")
    )

    (delta/leader-keys
      "b" '(:ignore t :wk "Buffer")
      "b b" '(switch-to-buffer :wk "Switch buffer")
      "b i" '(ibuffer :wk "Open Ibuffer")
      "b k" '(kill-this-buffer :wk "Kill buffer")
      "b n" '(next-buffer :wk "Next buffer")
      "b p" '(previous-buffer :wk "Previous buffer")
      "b r" '(revert-buffer :wk "Reload buffer"))

    (delta/leader-keys
      "e" '(:ignore t :wk "Evaluate")
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e d" '(eval-defun :wk "Evaluate defun containing or after point")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
      "e r" '(eval-region :wk "Evaluate elisp in region"))

    (delta/leader-keys
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Describe function")
      "h v" '(describe-variable :wk "Describe variable")
      "h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :wk "Reload emacs config"))

    (delta/leader-keys
      "t" '(:ignore t :wk "Toggle")
      "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
      "t t" '(visual-line-mode :wk "Toggle truncated lines"))

    (delta/leader-keys
      "w" '(:ignore t :wk "Window manipulation")
      "w c" '(evil-window-delete :wk "Close window")

      ;; Window split
      "w n" '(evil-window-new :wk "New window")
      "w s" '(evil-window-split :wk "Horizontal split")
      "w v" '(evil-window-vsplit :wk "Vertical split")

      ;; Window motions
      "w h" '(evil-window-left :wk "Window left")
      "w j" '(evil-window-down :wk "Window down")
      "w k" '(evil-window-up :wk "Window up")
      "w l" '(evil-window-right :wk "Window right")
      "w w" '(evil-window-next :wk "Goto next window")
  
    )


  )
#+end_src

* FONTS
Defining the fonts that Emacs should use.

** Setting the Font Face
#+begin_src emacs-lisp

  (set-face-attribute 'default nil
    :font "Hack Nerd Font Mono"
    :height 120
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "FantasqueSansM Nerd Font"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "Hack Nerd Font Mono"
    :height 120
    :weight 'medium)

  ;; Make comments italics and keywords bold 
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :weight 'bold)

  ;; Usefull for emacsclient (Si abusas de distintas instancias de emacs
  ;; usando el daemon emacsclient entonces necesitas esto para la fuente)
  (add-to-list 'default-frame-alist '(font . "Hack Nerd Font Mono-12"))

  ;; Line spacing :D
  (setq-default line-spacing 0.12)

#+end_src

** Zooming In/Out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Let's remove visual bloat :D

** Disable Menubar, Toolbars and Scrollbars

#+begin_src emacs-lisp
  (menu-bar-mode 1)
  (tool-bar-mode -1)
  (scroll-bar-mode 1)
#+end_src

** Display Line Numbers and Truncated Lines

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative) ;; Relative line numbers bb
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* ORG MODE
** Enabling Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets (ojal√° en mi pecho) rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
Disable annoying indentation in Org mode source blocks.

#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** Source Code Block Tag Expansion
Enabling Org-tempo for quick expansions.

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* THEME
Catppuccin '-'
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
      (setq catppuccin-flavor 'macchiato) ;; or 'latte / 'frappe / 'macchiato / 'mocha
  )
  (load-theme 'catppuccin :no-confirm)
#+end_src

* SUDO EDIT
Open files with sudo privileges or switch over to editing with sudo privileges.
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
      (delta/leader-keys
        "fu" '(sudo-edit-find-file :wk "Sudo find file")
        "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* WHICH-KEY
Just because I have the stupid :(

#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-dalay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit t
	  which-key-separator " > ")
  )

#+end_src
